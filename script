-- ZnfPro Universal Gaming Utility - ESP + Aimbot Fix + No Recoil Bypass

-- Load UI
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not success then
    warn("Rayfield UI Library failed to load")
    return
end

-- Main Window
local Window = Rayfield:CreateWindow({
    Name = "ZnfPro Universal GUI",
    LoadingTitle = "ZnfPro - Loader",
    LoadingSubtitle = "Universal script",
    KeySystem = true,
    KeySettings = {
        Title = "Key",
        Subtitle = "ZnfPro Key",
        Note = "Get key at: loaderkey.crabdance.com",
        FileName = "ZnfproLoaderKey",
        SaveKey = true,
        Key = {"FREEKEYFORALL"}
    }
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Variables
local ESPEnabled = false
local AimEnabled = false
local FOVCircleEnabled = false
local AimPart = "Head"
local FOVSize = 150
local AimSmoothness = 0.15
local TeamCheck = false

local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = false
FOVCircle.Radius = FOVSize
FOVCircle.Thickness = 2
FOVCircle.Filled = false
FOVCircle.Transparency = 0.5
FOVCircle.Color = Color3.fromRGB(255,255,255)

-- Recoil Bypass
local function bypassRecoil()
    for _, v in ipairs(getgc(true)) do
        if typeof(v) == "table" then
            for i, f in pairs(v) do
                if tostring(i):lower():find("recoil") and type(f) == "function" then
                    v[i] = function() return 0 end
                end
            end
        end
    end
end

-- Highlight ESP
local function updateESP()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
            local char = player.Character
            if not char:FindFirstChild("ZnfESP") then
                local h = Instance.new("Highlight")
                h.Name = "ZnfESP"
                h.FillColor = Color3.fromRGB(255, 0, 0)
                h.FillTransparency = 0.25
                h.OutlineColor = Color3.fromRGB(255, 0, 0)
                h.OutlineTransparency = 0
                h.Adornee = char
                h.Parent = char
            end
        end
    end
end

-- Closest target in FOV
local function getClosestPlayer()
    local closest, shortest = nil, math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character:FindFirstChild(AimPart) then
            if TeamCheck and player.Team == LocalPlayer.Team then
                continue
            end
            local pos, onScreen = camera:WorldToViewportPoint(player.Character[AimPart].Position)
            if onScreen then
                local dist = (Vector2.new(pos.X, pos.Y) - camera.ViewportSize/2).Magnitude
                if dist < shortest and dist < FOVSize then
                    shortest = dist
                    closest = player
                end
            end
        end
    end
    return closest
end

-- Aimbot logic
RunService.RenderStepped:Connect(function()
    if FOVCircleEnabled then
        FOVCircle.Position = camera.ViewportSize / 2
        FOVCircle.Radius = FOVSize
        FOVCircle.Visible = true
    else
        FOVCircle.Visible = false
    end

    if ESPEnabled then
        updateESP()
    end

    if AimEnabled then
        local target = getClosestPlayer()
        if target and target.Character and target.Character:FindFirstChild(AimPart) then
            local aimPos = target.Character[AimPart].Position
            camera.CFrame = camera.CFrame:Lerp(CFrame.new(camera.CFrame.Position, aimPos), AimSmoothness)
        end
    end
end)

-- Tabs and Controls
local MainTab = Window:CreateTab("Main", 4483362458)

MainTab:CreateToggle({
    Name = "ESP",
    CurrentValue = false,
    Callback = function(val)
        ESPEnabled = val
    end
})

MainTab:CreateToggle({
    Name = "Aimbot",
    CurrentValue = false,
    Callback = function(val)
        AimEnabled = val
    end
})

MainTab:CreateDropdown({
    Name = "Aimbot Part",
    Options = {"Head", "Chest", "Feet"},
    CurrentOption = "Head",
    Callback = function(opt)
        AimPart = opt
    end
})

MainTab:CreateToggle({
    Name = "FOV Circle",
    CurrentValue = false,
    Callback = function(val)
        FOVCircleEnabled = val
    end
})

MainTab:CreateSlider({
    Name = "FOV Size",
    Range = {50, 300},
    Increment = 10,
    CurrentValue = 150,
    Callback = function(val)
        FOVSize = val
    end
})

MainTab:CreateSlider({
    Name = "Smoothness",
    Range = {0.01, 1},
    Increment = 0.01,
    CurrentValue = 0.15,
    Callback = function(val)
        AimSmoothness = val
    end
})

MainTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = false,
    Callback = function(val)
        TeamCheck = val
    end
})

MainTab:CreateButton({
    Name = "Bypass Recoil",
    Callback = function()
        bypassRecoil()
    end
})
