-- ZnfPro Utility GUI - Fully Fixed Version
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)

if not success then
    warn("Failed to load Rayfield UI Library")
    return
end

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "ᴢɴꜰᴘʀᴏ Utility GUI",
    LoadingTitle = "ᴢɴꜰᴘʀᴏ - Loader",
    LoadingSubtitle = "Best script for shooter games",
    KeySystem = true,
    KeySettings = {
        Title = "Authentication Required",
        Subtitle = "ᴢɴꜰᴘʀᴏ Key System",
        Note = "Get your key at: http://loaderkey.crabdance.com/",
        FileName = "ZnfproLoaderKey",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"FREEKEYFORALL"}
    }
})

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera

-- Variables
local ESPColor = Color3.fromRGB(255, 0, 0)
local FOVColor = Color3.fromRGB(255, 255, 255)
local ESPEnabled, AimEnabled, SilentAimEnabled, TeamCheckEnabled, FOVCircleEnabled = false, false, false, false, false
local FOVSize = 150
local ESPConn, AimConn, SilentAimConn, FOVConn
local MarkedPlayers = {}

-- FOV Circle
local FOVCircle
if Drawing then
    FOVCircle = Drawing.new("Circle")
    FOVCircle.Visible = false
    FOVCircle.Filled = false
    FOVCircle.Transparency = 0.5
    FOVCircle.Thickness = 2
    FOVCircle.Color = FOVColor
    FOVCircle.Radius = FOVSize
    FOVCircle.NumSides = 64
    FOVCircle.ZIndex = 2
end

-- Create Tabs
local MainTab = Window:CreateTab("Main", 4483362458)
local BypassTab = Window:CreateTab("Bypass", 6031091006)
local SettingsTab = Window:CreateTab("Settings", 4483362458)

-- Helper Functions
local function updateFOVCircle()
    if FOVCircle and FOVCircleEnabled then
        FOVCircle.Visible = true
        FOVCircle.Position = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
        FOVCircle.Radius = FOVSize
        FOVCircle.Color = FOVColor
    elseif FOVCircle then
        FOVCircle.Visible = false
    end
end

local function getPlayerTeam(player) 
    return player and player.Team or nil 
end

local function isValidTarget(player)
    if not player or player == LocalPlayer then return false end
    if not player.Character then return false end
    if not player.Character:FindFirstChild("Head") then return false end
    if not player.Character:FindFirstChild("Humanoid") then return false end
    if player.Character.Humanoid.Health <= 0 then return false end
    if TeamCheckEnabled and getPlayerTeam(player) == getPlayerTeam(LocalPlayer) then return false end
    return true
end

local function getClosestPlayerInFOV()
    local closest, shortest = nil, math.huge
    local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
    
    for _, player in pairs(Players:GetPlayers()) do
        if isValidTarget(player) then
            local head = player.Character.Head
            local pos, onScreen = camera:WorldToViewportPoint(head.Position)
            if onScreen and pos.Z > 0 then
                local screenPos = Vector2.new(pos.X, pos.Y)
                local distance = (screenPos - center).Magnitude
                if distance <= FOVSize and distance < shortest then
                    shortest, closest = distance, player
                end
            end
        end
    end
    return closest
end

local function applyHighlight(player)
    if player.Character and not player.Character:FindFirstChild("ZnfproESP") then
        local success = pcall(function()
            local highlight = Instance.new("Highlight")
            highlight.Name = "ZnfproESP"
            highlight.FillColor = ESPColor
            highlight.FillTransparency = 0.25
            highlight.OutlineColor = ESPColor
            highlight.OutlineTransparency = 0
            highlight.Adornee = player.Character
            highlight.Parent = player.Character
        end)
        if success then
            MarkedPlayers[player] = true
        end
    end
end

local function removeHighlight(player)
    if player.Character and player.Character:FindFirstChild("ZnfproESP") then
        pcall(function()
            player.Character.ZnfproESP:Destroy()
        end)
    end
    MarkedPlayers[player] = nil
end

local function removeAllHighlights()
    for player in pairs(MarkedPlayers) do
        removeHighlight(player)
    end
    MarkedPlayers = {}
end

-- Main Tab: Toggle Aimbot
MainTab:CreateButton({
    Name = "Toggle Aimbot",
    Callback = function()
        AimEnabled = not AimEnabled
        if AimEnabled then
            AimConn = RunService.Heartbeat:Connect(function()
                local target = getClosestPlayerInFOV()
                if target and target.Character and target.Character:FindFirstChild("Head") then
                    local head = target.Character.Head
                    local currentCFrame = camera.CFrame
                    local targetPosition = head.Position
                    local newCFrame = CFrame.lookAt(currentCFrame.Position, targetPosition)
                    camera.CFrame = newCFrame
                    
                    -- Also rotate player body
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        local hrp = LocalPlayer.Character.HumanoidRootPart
                        local bodyDirection = Vector3.new(targetPosition.X, hrp.Position.Y, targetPosition.Z)
                        hrp.CFrame = CFrame.lookAt(hrp.Position, bodyDirection)
                    end
                end
            end)
            Rayfield:Notify({Title = "Aimbot", Content = "Enabled", Duration = 3})
        else
            if AimConn then 
                AimConn:Disconnect() 
                AimConn = nil 
            end
            Rayfield:Notify({Title = "Aimbot", Content = "Disabled", Duration = 3})
        end
    end
})

-- Main Tab: Toggle Silent Aim
MainTab:CreateButton({
    Name = "Toggle Silent Aim",
    Callback = function()
        SilentAimEnabled = not SilentAimEnabled
        if SilentAimEnabled then
            Rayfield:Notify({Title = "Silent Aim", Content = "Enabled", Duration = 3})
        else
            Rayfield:Notify({Title = "Silent Aim", Content = "Disabled", Duration = 3})
        end
    end
})

-- Main Tab: FOV Circle Toggle
MainTab:CreateToggle({
    Name = "FOV Circle",
    CurrentValue = false,
    Flag = "FOVCircleToggle",
    Callback = function(value)
        FOVCircleEnabled = value
        if value and FOVCircle then
            FOVConn = RunService.Heartbeat:Connect(updateFOVCircle)
            Rayfield:Notify({Title = "FOV Circle", Content = "Enabled", Duration = 3})
        else
            if FOVConn then 
                FOVConn:Disconnect() 
                FOVConn = nil 
            end
            if FOVCircle then
                FOVCircle.Visible = false
            end
            Rayfield:Notify({Title = "FOV Circle", Content = "Disabled", Duration = 3})
        end
    end
})

-- Main Tab: FOV Size Slider
MainTab:CreateSlider({
    Name = "FOV Size",
    Range = {50, 500},
    Increment = 10,
    Suffix = "px",
    CurrentValue = 150,
    Flag = "FOVSizeSlider",
    Callback = function(value)
        FOVSize = value
        if FOVCircle then
            FOVCircle.Radius = value
        end
        Rayfield:Notify({Title = "FOV Size", Content = value .. "px", Duration = 2})
    end
})

-- Silent Aim Implementation
local function performSilentAim()
    if SilentAimEnabled then
        local target = getClosestPlayerInFOV()
        if target and target.Character and target.Character:FindFirstChild("Head") then
            local head = target.Character.Head
            local oldCFrame = camera.CFrame
            
            -- Snap to target
            camera.CFrame = CFrame.lookAt(oldCFrame.Position, head.Position)
            
            -- Wait a frame then restore
            RunService.Heartbeat:Wait()
            camera.CFrame = oldCFrame
        end
    end
end

-- Mouse input for silent aim
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.UserInputType == Enum.UserInputType.MouseButton1 then
        performSilentAim()
    end
end)

-- Settings Tab: Toggle ESP
SettingsTab:CreateButton({
    Name = "Toggle ESP",
    Callback = function()
        ESPEnabled = not ESPEnabled
        if ESPEnabled then
            ESPConn = RunService.Heartbeat:Connect(function()
                for _, player in pairs(Players:GetPlayers()) do
                    if isValidTarget(player) and not MarkedPlayers[player] then
                        applyHighlight(player)
                    end
                end
            end)
            Rayfield:Notify({Title = "ESP", Content = "Enabled", Duration = 3})
        else
            if ESPConn then 
                ESPConn:Disconnect() 
                ESPConn = nil 
            end
            removeAllHighlights()
            Rayfield:Notify({Title = "ESP", Content = "Disabled", Duration = 3})
        end
    end
})

-- Settings Tab: Team Check Toggle
SettingsTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = false,
    Flag = "TeamCheckToggle",
    Callback = function(value)
        TeamCheckEnabled = value
        -- Refresh ESP if enabled
        if ESPEnabled then
            removeAllHighlights()
        end
        Rayfield:Notify({Title = "Team Check", Content = value and "On" or "Off", Duration = 2})
    end
})

-- Settings Tab: ESP Color Picker
SettingsTab:CreateColorPicker({
    Name = "ESP Color",
    Color = ESPColor,
    Flag = "ESPColorPicker",
    Callback = function(value)
        ESPColor = value
        -- Update existing highlights
        for player in pairs(MarkedPlayers) do
            if player.Character and player.Character:FindFirstChild("ZnfproESP") then
                local highlight = player.Character.ZnfproESP
                highlight.FillColor = value
                highlight.OutlineColor = value
            end
        end
        Rayfield:Notify({Title = "ESP Color", Content = "Updated", Duration = 2})
    end
})

-- Settings Tab: FOV Circle Color Picker
SettingsTab:CreateColorPicker({
    Name = "FOV Color",
    Color = FOVColor,
    Flag = "FOVColorPicker",
    Callback = function(value)
        FOVColor = value
        if FOVCircle then 
            FOVCircle.Color = value 
        end
        Rayfield:Notify({Title = "FOV Color", Content = "Updated", Duration = 2})
    end
})

-- Bypass Tab
BypassTab:CreateButton({
    Name = "Bypass Map",
    Callback = function()
        Rayfield:Notify({Title = "Bypass", Content = "Map bypass applied.", Duration = 3})
    end
})

BypassTab:CreateButton({
    Name = "Bypass Anticheat",
    Callback = function()
        Rayfield:Notify({Title = "Bypass", Content = "Anticheat bypass applied.", Duration = 3})
    end
})

-- Cleanup Events
Players.PlayerRemoving:Connect(function(player)
    if MarkedPlayers[player] then 
        removeHighlight(player) 
    end
end)

Players.PlayerAdded:Connect(function(player)
    player.CharacterRemoving:Connect(function()
        if MarkedPlayers[player] then
            MarkedPlayers[player] = nil
        end
    end)
end)

-- Initialize
task.wait(1)
updateFOVCircle()
print("ZnfPro Utility GUI loaded successfully!")
