-- ZnfPro Universal Gaming Utility - Aimbot & ESP Fix
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not success then
    warn("Failed to load Rayfield UI Library")
    return
end

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "ᴢɴꜰᴘʀᴏ Universal GUI",
    LoadingTitle = "ᴢɴꜰᴘʀᴏ - Loader",
    LoadingSubtitle = "Universal script for all games",
    KeySystem = true,
    KeySettings = {
        Title = "Authentication Required",
        Subtitle = "ᴢɴꜰᴘʀᴏ Key System",
        Note = "Get your key at: loaderkey.crabdance.com",
        FileName = "ZnfproLoaderKey",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"FREEKEYFORALL"}
    }
})

-- Services
local Players          = game:GetService("Players")
local LocalPlayer      = Players.LocalPlayer
local RunService       = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local camera           = workspace.CurrentCamera

-- Variables
local ESPColor         = Color3.fromRGB(255, 0, 0)
local FOVColor         = Color3.fromRGB(255, 255, 255)
local ESPEnabled       = false
local AimMode          = "Regular"        -- "Regular" o "Silent"
local TeamCheckEnabled = false
local FOVSize          = 150
local AimSmoothness    = 0.1
local ESPConn, AimConn

local MarkedPlayers = {}

-- Helper: parti del character
local function getCharacterParts(character)
    if not character then return {} end
    return {
        head = character:FindFirstChild("Head"),
        humanoid = character:FindFirstChild("Humanoid"),
    }
end

-- Verifica target valido
local function isValidTarget(player)
    if player == LocalPlayer or not player.Character then return false end
    local parts = getCharacterParts(player.Character)
    if not parts.head or not parts.humanoid or parts.humanoid.Health <= 0 then
        return false
    end
    if TeamCheckEnabled then
        local pt, lt = player.Team, LocalPlayer.Team
        if pt and lt and pt == lt then return false end
    end
    return true
end

-- Trova il player più vicino al centro (testa) entro FOVSize
local function getClosestPlayerInFOV()
    local closest, minDist = nil, FOVSize
    local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
    for _, player in ipairs(Players:GetPlayers()) do
        if isValidTarget(player) then
            local head = getCharacterParts(player.Character).head
            local pos, onScreen = camera:WorldToViewportPoint(head.Position)
            if onScreen and pos.Z > 0 then
                local screenPos = Vector2.new(pos.X, pos.Y)
                local dist = (screenPos - center).Magnitude
                if dist < minDist then
                    minDist, closest = dist, player
                end
            end
        end
    end
    return closest
end

-- ESP
local function applyESP(player)
    if player.Character and not player.Character:FindFirstChild("ZnfproESP") then
        pcall(function()
            local h = Instance.new("Highlight", player.Character)
            h.Name              = "ZnfproESP"
            h.FillColor         = ESPColor
            h.FillTransparency  = 0.25
            h.OutlineColor      = ESPColor
            h.OutlineTransparency = 0

            local bg = Instance.new("BillboardGui", player.Character)
            bg.Name         = "ZnfproESPText"
            bg.Adornee      = getCharacterParts(player.Character).head
            bg.Size         = UDim2.new(0,100,0,50)
            bg.StudsOffset  = Vector3.new(0,2,0)
            bg.AlwaysOnTop  = true

            local tl = Instance.new("TextLabel", bg)
            tl.Size           = UDim2.new(1,0,1,0)
            tl.BackgroundTransparency = 1
            tl.Text           = player.Name
            tl.TextColor3     = ESPColor
            tl.TextScaled     = true
            tl.Font           = Enum.Font.SourceSansBold

            MarkedPlayers[player] = true
        end)
    end
end

local function removeESP(player)
    if player.Character then
        pcall(function()
            local h  = player.Character:FindFirstChild("ZnfproESP")
            local bg = player.Character:FindFirstChild("ZnfproESPText")
            if h  then h:Destroy()  end
            if bg then bg:Destroy() end
        end)
    end
    MarkedPlayers[player] = nil
end

-- Smooth head aim
local function smoothHeadAim(targetPos)
    local camC0 = camera.CFrame
    local desired = CFrame.lookAt(camC0.Position, targetPos + Vector3.new(0,0,0)) 
    camera.CFrame = camC0:Lerp(desired, AimSmoothness)
end

-- RenderLoop: Aimbot & ESP
RunService.RenderStepped:Connect(function()
    -- ESP
    if ESPEnabled then
        for _, p in ipairs(Players:GetPlayers()) do
            if isValidTarget(p) then
                applyESP(p)
            elseif MarkedPlayers[p] then
                removeESP(p)
            end
        end
    end

    -- Aimbot
    local target = getClosestPlayerInFOV()
    if target then
        local head = getCharacterParts(target.Character).head
        if AimMode == "Regular" then
            smoothHeadAim(head.Position)
        elseif AimMode == "Silent" and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
            -- Silent: mossa veloce e poi reset
            local old = camera.CFrame
            camera.CFrame = CFrame.lookAt(old.Position, head.Position)
            task.wait()
            camera.CFrame = old
        end
    end
end)

-- GUI
local MainTab     = Window:CreateTab("Main",     4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local BypassTab   = Window:CreateTab("Bypass",   6031091006)

-- Aim Mode switch
MainTab:CreateDropdown({
    Name     = "Aim Mode",
    Options  = {"Regular", "Silent"},
    Current  = "Regular",
    Flag     = "AimModeSwitch",
    Callback = function(v)
        AimMode = v
        Rayfield:Notify({ Title = "Aim Mode", Content = v.." Aim", Duration = 2 })
    end
})

-- Toggle ESP
SettingsTab:CreateToggle({
    Name         = "ESP",
    CurrentValue = false,
    Callback     = function(v)
        ESPEnabled = v
        if not v then
            for p in pairs(MarkedPlayers) do removeESP(p) end
        end
        Rayfield:Notify({ Title = "ESP", Content = v and "Enabled" or "Disabled", Duration = 2 })
    end
})

-- Team Check Toggle
SettingsTab:CreateToggle({
    Name         = "Team Check",
    CurrentValue = false,
    Callback     = function(v)
        TeamCheckEnabled = v
        Rayfield:Notify({ Title = "Team Check", Content = v and "On" or "Off", Duration = 2 })
    end
})

-- FOV Size Slider
SettingsTab:CreateSlider({
    Name         = "FOV Size",
    Range        = {50, 500},
    Increment    = 10,
    Suffix       = "px",
    CurrentValue = FOVSize,
    Callback     = function(v) FOVSize = v end
})

-- Aim Smoothness Slider
SettingsTab:CreateSlider({
    Name         = "Aim Smoothness",
    Range        = {0.01, 1},
    Increment    = 0.01,
    CurrentValue = AimSmoothness,
    Callback     = function(v) AimSmoothness = v end
})

-- ESP Color Picker
SettingsTab:CreateColorPicker({
    Name  = "ESP Color",
    Color = ESPColor,
    Callback = function(v)
        ESPColor = v
        for p in pairs(MarkedPlayers) do
            local h  = p.Character and p.Character:FindFirstChild("ZnfproESP")
            local bg = p.Character and p.Character:FindFirstChild("ZnfproESPText")
            if h  then h.FillColor = v; h.OutlineColor = v end
            if bg and bg:FindFirstChild("TextLabel") then
                bg.TextLabel.TextColor3 = v
            end
        end
    end
})

-- Bypass Tab (resta invariato)
BypassTab:CreateButton({
    Name = "Universal Bypass",
    Callback = function()
        pcall(function()
            for _, f in pairs(getgc(true)) do
                if type(f) == "table" and rawget(f, "Detected") then
                    rawset(f, "Detected", function() return false end)
                end
            end
        end)
        Rayfield:Notify({ Title = "Bypass", Content = "Applied", Duration = 2 })
    end
})

print("ZnfPro Universal GUI (fixed) loaded — AimMode:", AimMode)
