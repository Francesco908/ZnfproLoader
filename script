-- ZnfPro Universal Gaming Utility - Complete Fix with No Recoil & Improved Aimbot
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)

if not success then
    warn("Failed to load Rayfield UI Library")
    return
end

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "ᴢɴꜰᴘʀᴏ Universal GUI",
    LoadingTitle = "ᴢɴꜰᴘʀᴏ - Loader",
    LoadingSubtitle = "Universal script for all games",
    KeySystem = true,
    KeySettings = {
        Title = "Authentication Required",
        Subtitle = "ᴢɴꜰᴘʀᴏ Key System",
        Note = "Get your key at: loaderkey.crabdance.com",
        FileName = "ZnfproLoaderKey",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"FREEKEYFORALL"}
    }
})

-- Services
local Players           = game:GetService("Players")
local LocalPlayer       = Players.LocalPlayer
local RunService        = game:GetService("RunService")
local UserInputService  = game:GetService("UserInputService")
local camera            = workspace.CurrentCamera

-- Variables
local ESPColor          = Color3.fromRGB(255, 0, 0)
local FOVColor          = Color3.fromRGB(255, 255, 255)
local ESPEnabled        = false
local AimEnabled        = false
local SilentAimEnabled  = false
local TeamCheckEnabled  = false
local FOVCircleEnabled  = false
local NoRecoilEnabled   = false
local FOVSize           = 150
local AimSmoothness     = 0.1
local ESPConn, AimConn, SilentAimConn, FOVConn
local MarkedPlayers     = {}

-- FOV Circle (Drawing API)
local FOVCircle
if Drawing then
    FOVCircle = Drawing.new("Circle")
    FOVCircle.Visible      = false
    FOVCircle.Filled       = false
    FOVCircle.Transparency = 0.5
    FOVCircle.Thickness    = 2
    FOVCircle.Color        = FOVColor
    FOVCircle.Radius       = FOVSize
    FOVCircle.NumSides     = 64
    FOVCircle.ZIndex       = 2
end

-- Tabs
local MainTab     = Window:CreateTab("Main",     4483362458)
local SettingsTab = Window:CreateTab("Settings", 123456789) -- ← nuovo ID immagine
local BypassTab   = Window:CreateTab("Bypass",   6031091006)

-- Helpers
local function getCharacterParts(char)
    return {
        head = char:FindFirstChild("Head"),
        humanoid = char:FindFirstChild("Humanoid"),
        hrp = char:FindFirstChild("HumanoidRootPart")
    }
end

local function updateFOVCircle()
    if FOVCircle and FOVCircleEnabled then
        FOVCircle.Visible  = true
        FOVCircle.Position = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
        FOVCircle.Radius   = FOVSize
        FOVCircle.Color    = FOVColor
    elseif FOVCircle then
        FOVCircle.Visible = false
    end
end

local function getPlayerTeam(pl)
    return (pl and pl.Team) or nil
end

local function isValidTarget(pl)
    if not pl or pl == LocalPlayer then return false end
    local char = pl.Character
    if not char then return false end
    local parts = getCharacterParts(char)
    if not parts.head or not parts.humanoid or parts.humanoid.Health <= 0 then return false end
    if TeamCheckEnabled and getPlayerTeam(pl) == getPlayerTeam(LocalPlayer) then return false end
    return true
end

local function getClosestPlayerInFOV()
    local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
    local closest, shortest = nil, math.huge
    for _, pl in pairs(Players:GetPlayers()) do
        if isValidTarget(pl) then
            local pos, onScreen = camera:WorldToViewportPoint(pl.Character.Head.Position)
            if onScreen and pos.Z > 0 then
                local dist = (Vector2.new(pos.X,pos.Y) - center).Magnitude
                if dist <= FOVSize and dist < shortest then
                    shortest, closest = dist, pl
                end
            end
        end
    end
    return closest
end

-- ESP
local function applyESP(pl)
    if pl.Character and not pl.Character:FindFirstChild("ZnfproESP") then
        local h = Instance.new("Highlight")
        h.Name             = "ZnfproESP"
        h.FillColor        = ESPColor
        h.FillTransparency = 0.25
        h.OutlineColor     = ESPColor
        h.OutlineTransparency = 0
        h.Adornee          = pl.Character
        h.Parent           = pl.Character
        MarkedPlayers[pl]  = true
    end
end

local function removeESP(pl)
    if pl.Character then
        local h = pl.Character:FindFirstChild("ZnfproESP")
        if h then h:Destroy() end
    end
    MarkedPlayers[pl] = nil
end

local function removeAllESP()
    for pl in pairs(MarkedPlayers) do
        removeESP(pl)
    end
end

-- Predictive Aim
local function predictPosition(head)
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return head end
    local dist = (hrp.Position - head).Magnitude
    local vel = head.Parent.PrimaryPart and head.Parent.PrimaryPart.Velocity or Vector3.new()
    local t = dist / 1000
    return head + vel * t
end

-- Smooth Aim
local function smoothAim(targetPos)
    local cf    = camera.CFrame
    local goal  = CFrame.lookAt(cf.Position, targetPos)
    camera.CFrame = cf:Lerp(goal, AimSmoothness)
end

-- No Recoil Handler
do
    local lastCF = camera.CFrame
    RunService.RenderStepped:Connect(function()
        if NoRecoilEnabled then
            camera.CFrame = lastCF
        end
        lastCF = camera.CFrame
    end)
end

-- Main Tab Buttons & Toggles

-- Aimbot
MainTab:CreateButton({
    Name = "Toggle Aimbot",
    Callback = function()
        AimEnabled = not AimEnabled
        if AimEnabled then
            AimConn = RunService.Heartbeat:Connect(function()
                local target = getClosestPlayerInFOV()
                if target then
                    local head = target.Character.Head
                    smoothAim(predictPosition(head.Position))
                end
            end)
            Rayfield:Notify({Title="Aimbot",Content="Enabled",Duration=3})
        else
            if AimConn then AimConn:Disconnect() AimConn = nil end
            Rayfield:Notify({Title="Aimbot",Content="Disabled",Duration=3})
        end
    end
})

-- Silent Aim
MainTab:CreateButton({
    Name = "Toggle Silent Aim",
    Callback = function()
        SilentAimEnabled = not SilentAimEnabled
        Rayfield:Notify({Title="Silent Aim",Content=SilentAimEnabled and "Enabled" or "Disabled",Duration=3})
    end
})

-- FOV Circle
MainTab:CreateToggle({
    Name = "FOV Circle",
    CurrentValue = false,
    Flag = "FOVCircleToggle",
    Callback = function(val)
        FOVCircleEnabled = val
        if val then
            FOVConn = RunService.Heartbeat:Connect(updateFOVCircle)
        else
            if FOVConn then FOVConn:Disconnect() FOVConn = nil end
            if FOVCircle then FOVCircle.Visible = false end
        end
        Rayfield:Notify({Title="FOV Circle",Content=val and "Enabled" or "Disabled",Duration=3})
    end
})

-- FOV Size
MainTab:CreateSlider({
    Name = "FOV Size",
    Range = {50,500},
    Increment = 10,
    Suffix = "px",
    CurrentValue = 150,
    Flag = "FOVSizeSlider",
    Callback = function(val)
        FOVSize = val
        if FOVCircle then FOVCircle.Radius = val end
    end
})

-- Aim Smoothness
MainTab:CreateSlider({
    Name = "Aim Smoothness",
    Range = {0.01,1},
    Increment = 0.01,
    Suffix = "",
    CurrentValue = 0.1,
    Flag = "AimSmoothnessSlider",
    Callback = function(val)
        AimSmoothness = val
        Rayfield:Notify({Title="Smoothness",Content=tostring(val),Duration=2})
    end
})

-- No Recoil
MainTab:CreateToggle({
    Name = "No Recoil",
    CurrentValue = false,
    Flag = "NoRecoilToggle",
    Callback = function(val)
        NoRecoilEnabled = val
        Rayfield:Notify({Title="No Recoil",Content=val and "Enabled" or "Disabled",Duration=3})
    end
})

-- Silent Aim Hook
UserInputService.InputBegan:Connect(function(input, gp)
    if not gp and input.UserInputType == Enum.UserInputType.MouseButton1 and SilentAimEnabled then
        local target = getClosestPlayerInFOV()
        if target then
            local head = target.Character.Head
            local old = camera.CFrame
            camera.CFrame = CFrame.lookAt(old.Position, head.Position)
            task.wait(0.01)
            camera.CFrame = old
        end
    end
end)

-- Settings Tab

-- ESP
SettingsTab:CreateButton({
    Name = "Toggle ESP",
    Callback = function()
        ESPEnabled = not ESPEnabled
        if ESPEnabled then
            ESPConn = RunService.Heartbeat:Connect(function()
                for _, pl in pairs(Players:GetPlayers()) do
                    if isValidTarget(pl) then
                        applyESP(pl)
                    elseif MarkedPlayers[pl] and not isValidTarget(pl) then
                        removeESP(pl)
                    end
                end
            end)
            Rayfield:Notify({Title="ESP",Content="Enabled",Duration=3})
        else
            if ESPConn then ESPConn:Disconnect() ESPConn = nil end
            removeAllESP()
            Rayfield:Notify({Title="ESP",Content="Disabled",Duration=3})
        end
    end
})

-- Team Check
SettingsTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = false,
    Flag = "TeamCheckToggle",
    Callback = function(val)
        TeamCheckEnabled = val
        removeAllESP()
        Rayfield:Notify({Title="Team Check",Content=val and "On" or "Off",Duration=2})
    end
})

-- ESP Color
SettingsTab:CreateColorPicker({
    Name = "ESP Color",
    Color = ESPColor,
    Flag = "ESPColorPicker",
    Callback = function(val)
        ESPColor = val
        for pl in pairs(MarkedPlayers) do
            local h = pl.Character and pl.Character:FindFirstChild("ZnfproESP")
            if h then
                h.FillColor    = val
                h.OutlineColor = val
            end
        end
    end
})

-- FOV Color
SettingsTab:CreateColorPicker({
    Name = "FOV Color",
    Color = FOVColor,
    Flag = "FOVColorPicker",
    Callback = function(val)
        FOVColor = val
        if FOVCircle then FOVCircle.Color = val end
    end
})

-- Bypass Tab
BypassTab:CreateButton({
    Name = "Universal Bypass",
    Callback = function()
        pcall(function()
            for _,gc in pairs(getgc(true)) do
                if type(gc)=="table" and rawget(gc,"Detected") then
                    rawset(gc,"Detected",function() return false end)
                end
            end
        end)
        Rayfield:Notify({Title="Bypass",Content="Universal bypass applied",Duration=3})
    end
})
BypassTab:CreateButton({
    Name = "Speed Hack",
    Callback = function()
        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if hrp then hrp.WalkSpeed = 50 end
        Rayfield:Notify({Title="Speed",Content="WalkSpeed → 50",Duration=3})
    end
})
BypassTab:CreateButton({
    Name = "Jump Power",
    Callback = function()
        local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if hrp then hrp.JumpPower = 100 end
        Rayfield:Notify({Title="Jump",Content="JumpPower → 100",Duration=3})
    end
})

-- Cleanup
Players.PlayerRemoving:Connect(function(pl)
    if MarkedPlayers[pl] then removeESP(pl) end
end)

-- Init
task.wait(1)
updateFOVCircle()
print("ZnfPro Universal GUI loaded successfully!")
