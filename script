-- ZnfPro Universal Gaming Utility - Complete Fix + FOV Circle
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)

if not success then
    warn("Failed to load Rayfield UI Library")
    return
end

local Window = Rayfield:CreateWindow({
    Name = "ᴢɴꜰᴘʀᴏ Universal GUI",
    LoadingTitle = "ᴢɴꜰᴘʀᴏ - Loader",
    LoadingSubtitle = "Universal script for all games",
    KeySystem = true,
    KeySettings = {
        Title = "Authentication Required",
        Subtitle = "ᴢɴꜰᴘʀᴏ Key System",
        Note = "Get your key at: http://loaderkey.crabdance.com/",
        FileName = "ZnfproLoaderKey",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"FREEKEYFORALL"}
    }
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local camera = workspace.CurrentCamera

local ESPColor = Color3.fromRGB(255, 0, 0)
local FOVColor = Color3.fromRGB(255, 255, 255)
local ESPEnabled, AimEnabled, SilentAimEnabled, TeamCheckEnabled, FOVCircleEnabled = false, false, false, false, false
local FOVSize = 150
local AimSmoothness = 0.1
local ESPConn, AimConn, SilentAimConn, FOVConn
local MarkedPlayers = {}

local FOVCircle
if Drawing then
    FOVCircle = Drawing.new("Circle")
    FOVCircle.Visible = false
    FOVCircle.Filled = false
    FOVCircle.Transparency = 0.5
    FOVCircle.Thickness = 2
    FOVCircle.Color = FOVColor
    FOVCircle.Radius = FOVSize
    FOVCircle.NumSides = 64
    FOVCircle.ZIndex = 2
end

local MainTab = Window:CreateTab("Main", 4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local BypassTab = Window:CreateTab("Bypass", 6031091006)

local function getCharacterParts(character)
    local parts = {}
    if character then
        parts.head = character:FindFirstChild("Head")
        parts.humanoid = character:FindFirstChild("Humanoid")
        parts.humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        parts.torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
    end
    return parts
end

local function updateFOVCircle()
    if FOVCircle and FOVCircleEnabled then
        FOVCircle.Visible = true
        FOVCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
        FOVCircle.Radius = FOVSize
        FOVCircle.Color = FOVColor
    elseif FOVCircle then
        FOVCircle.Visible = false
    end
end

local function getPlayerTeam(player)
    return player and (player.Team or player.TeamColor) or nil
end

local function isValidTarget(player)
    if not player or player == LocalPlayer then return false end
    if not player.Character then return false end
    local parts = getCharacterParts(player.Character)
    if not parts.head or not parts.humanoid then return false end
    if parts.humanoid.Health <= 0 then return false end
    if TeamCheckEnabled then
        local team1, team2 = getPlayerTeam(player), getPlayerTeam(LocalPlayer)
        if team1 and team2 and team1 == team2 then return false end
    end
    return true
end

local function getClosestPlayerInFOV()
    local closest, shortest = nil, math.huge
    local center = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    for _, player in pairs(Players:GetPlayers()) do
        if isValidTarget(player) then
            local parts = getCharacterParts(player.Character)
            if parts.head then
                local pos, onScreen = camera:WorldToViewportPoint(parts.head.Position)
                if onScreen and pos.Z > 0 then
                    local distance = (Vector2.new(pos.X, pos.Y) - center).Magnitude
                    if distance <= FOVSize and distance < shortest then
                        closest = player
                        shortest = distance
                    end
                end
            end
        end
    end
    return closest
end

local function applyESP(player)
    if player.Character and not player.Character:FindFirstChild("ZnfproESP") then
        local highlight = Instance.new("Highlight", player.Character)
        highlight.Name = "ZnfproESP"
        highlight.FillColor = ESPColor
        highlight.FillTransparency = 0.25
        highlight.OutlineColor = ESPColor
        highlight.OutlineTransparency = 0
        highlight.Adornee = player.Character

        local billboardGui = Instance.new("BillboardGui", player.Character)
        billboardGui.Name = "ZnfproESPText"
        billboardGui.Adornee = player.Character:FindFirstChild("Head")
        billboardGui.Size = UDim2.new(0, 100, 0, 50)
        billboardGui.StudsOffset = Vector3.new(0, 2, 0)

        local textLabel = Instance.new("TextLabel", billboardGui)
        textLabel.Size = UDim2.new(1, 0, 1, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = player.Name
        textLabel.TextColor3 = ESPColor
        textLabel.TextScaled = true
        textLabel.Font = Enum.Font.SourceSansBold

        MarkedPlayers[player] = true
    end
end

local function removeESP(player)
    if player.Character then
        local highlight = player.Character:FindFirstChild("ZnfproESP")
        if highlight then highlight:Destroy() end
        local billboard = player.Character:FindFirstChild("ZnfproESPText")
        if billboard then billboard:Destroy() end
    end
    MarkedPlayers[player] = nil
end

local function removeAllESP()
    for player in pairs(MarkedPlayers) do
        removeESP(player)
    end
    MarkedPlayers = {}
end

local function smoothAim(targetPosition)
    local currentCFrame = camera.CFrame
    local targetCFrame = CFrame.lookAt(currentCFrame.Position, targetPosition)
    local newCFrame = currentCFrame:Lerp(targetCFrame, AimSmoothness)
    camera.CFrame = newCFrame
end

MainTab:CreateButton({
    Name = "Toggle Aimbot",
    Callback = function()
        AimEnabled = not AimEnabled
        if AimEnabled then
            AimConn = RunService.Heartbeat:Connect(function()
                local target = getClosestPlayerInFOV()
                if target and target.Character then
                    local parts = getCharacterParts(target.Character)
                    if parts.head then
                        smoothAim(parts.head.Position)
                    end
                end
            end)
            Rayfield:Notify({Title = "Aimbot", Content = "Enabled", Duration = 3})
        else
            if AimConn then AimConn:Disconnect() AimConn = nil end
            Rayfield:Notify({Title = "Aimbot", Content = "Disabled", Duration = 3})
        end
    end
})

MainTab:CreateButton({
    Name = "Toggle Silent Aim",
    Callback = function()
        SilentAimEnabled = not SilentAimEnabled
        Rayfield:Notify({Title = "Silent Aim", Content = SilentAimEnabled and "Enabled" or "Disabled", Duration = 3})
    end
})

MainTab:CreateToggle({
    Name = "FOV Circle",
    CurrentValue = false,
    Flag = "FOVCircleToggle",
    Callback = function(value)
        FOVCircleEnabled = value
        if value and FOVCircle then
            if not FOVConn then
                FOVConn = RunService.Heartbeat:Connect(updateFOVCircle)
            end
        else
            if FOVConn then FOVConn:Disconnect() FOVConn = nil end
            if FOVCircle then FOVCircle.Visible = false end
        end
        Rayfield:Notify({Title = "FOV Circle", Content = value and "Enabled" or "Disabled", Duration = 3})
    end
})

MainTab:CreateSlider({
    Name = "FOV Size",
    Range = {50, 500},
    Increment = 10,
    Suffix = "px",
    CurrentValue = 150,
    Flag = "FOVSizeSlider",
    Callback = function(value)
        FOVSize = value
    end
})
