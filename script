-- ZnfPro Universal Gaming Utility - Aimbot Fix & Stabilization
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not success then
    warn("Failed to load Rayfield UI Library")
    return
end

-- Window Initialization
local Window = Rayfield:CreateWindow({
    Name = "ᴢɴꜰᴘʀᴏ Universal GUI",
    LoadingTitle = "ᴢɴꜰᴘʀᴏ - Loader",
    LoadingSubtitle = "Universal script for all games",
    KeySystem = true,
    KeySettings = { Title = "Authentication Required", Subtitle = "ᴢɴꜰᴘʀᴏ Key System", Note = "Get your key at: loaderkey.crabdance.com", FileName = "ZnfproLoaderKey", SaveKey = true, GrabKeyFromSite = false, Key = {"FREEKEYFORALL"} }
})

-- Services & Vars
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera

local ESPColor = Color3.fromRGB(255,0,0)
local AimEnabled, NoRecoilEnabled, ESPEnabled, TeamCheckEnabled = false, false, false, false
local FOVSize, AimSmoothness = 150, 0.1
local AimConn, ESPConn
local Marked = {}

-- Helpers
local function getParts(char)
    local head = char:FindFirstChild("Head")
    local root = char:FindFirstChild("HumanoidRootPart")
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    return head, root, humanoid
end

local function isValid(player)
    if player == LocalPlayer or not player.Character then return false end
    local head, root, h = getParts(player.Character)
    if not head or not h or h.Health <= 0 then return false end
    if TeamCheckEnabled then
        if player.Team == LocalPlayer.Team then return false end
    end
    return true
end

local function closestInFOV()
    local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
    local best, dist = nil, math.huge
    for _, p in pairs(Players:GetPlayers()) do
        if isValid(p) then
            local head = p.Character:FindFirstChild("Head")
            if head then
                local pos, onScreen = camera:WorldToViewportPoint(head.Position)
                if onScreen and pos.Z>0 then
                    local delta = (Vector2.new(pos.X,pos.Y) - center).Magnitude
                    if delta < dist and delta <= FOVSize then
                        best, dist = p, delta
                    end
                end
            end
        end
    end
    return best
end

-- Aimbot Logic: Aim at head with prediction & pcall safety
local function doAim()
    pcall(function()
        local target = closestInFOV()
        if target and target.Character then
            local head, root = getParts(target.Character)
            if head and root then
                local predicted = head.Position + (root.Velocity * AimSmoothness)
                local camC = camera.CFrame
                camera.CFrame = camC:Lerp(CFrame.lookAt(camC.Position, predicted), AimSmoothness)
            end
        end
    end)
end

-- GUI Tabs
local Main = Window:CreateTab("Main", 4483362458)
local Settings = Window:CreateTab("Settings", 4483362458)
local Bypass = Window:CreateTab("Bypass", 6031091006)

-- Main: Aimbot Toggle
Main:CreateToggle({ Name="Aimbot", CurrentValue=false, Flag="AimToggle", Callback=function(val)
    AimEnabled = val
    if AimConn then AimConn:Disconnect() end
    if AimEnabled then
        AimConn = RunService.RenderStepped:Connect(doAim)
        Rayfield:Notify({Title="Aimbot", Content="Enabled", Duration=3})
    else
        Rayfield:Notify({Title="Aimbot", Content="Disabled", Duration=3})
    end
end})

-- Main: FOV & Smoothness
Main:CreateSlider({ Name="FOV Size", Range={50,500}, Increment=10, Suffix="px", CurrentValue=FOVSize, Flag="FOVSlider", Callback=function(v) FOVSize=v end })
Main:CreateSlider({ Name="Smoothness", Range={0.01,1}, Increment=0.01, CurrentValue=AimSmoothness, Flag="SmoothSlider", Callback=function(v) AimSmoothness=v end })

-- Main: No Recoil
Main:CreateToggle({ Name="No Recoil", CurrentValue=false, Flag="RecoilToggle", Callback=function(val)
    NoRecoilEnabled = val
    if NoRecoilEnabled then
        pcall(function()
            for _,fn in pairs(getgc(true)) do
                if type(fn)=="function" and debug.getinfo(fn).name:lower():find("recoil") then
                    hookfunction(fn, function() end)
                end
            end
        end)
        Rayfield:Notify({Title="NoRecoil", Content="Enabled", Duration=3})
    else
        Rayfield:Notify({Title="NoRecoil", Content="Disabled", Duration=3})
    end
end})

-- Settings: ESP & TeamCheck
Settings:CreateToggle({ Name="ESP", CurrentValue=false, Flag="ESPToggle", Callback=function(v)
    ESPEnabled=v
    if ESPConn then ESPConn:Disconnect() end
    if ESPEnabled then
        ESPConn = RunService.Heartbeat:Connect(function()
            for _,p in pairs(Players:GetPlayers()) do
                if isValid(p) and not Marked[p] then
                    -- apply highlight
                    local h = Instance.new("Highlight"); h.Adornee=p.Character; h.FillColor=ESPColor; h.Parent=p.Character
                    Marked[p]=h
                elseif (not isValid(p)) and Marked[p] then
                    Marked[p]:Destroy(); Marked[p]=nil
                end
            end
        end)
    else
        for p,h in pairs(Marked) do h:Destroy(); Marked[p]=nil end
    end
end})
Settings:CreateToggle({ Name="Team Check", CurrentValue=false, Flag="TeamToggle", Callback=function(v) TeamCheckEnabled=v end })
Settings:CreateColorPicker({ Name="ESP Color", Color=ESPColor, Flag="ESPColorPicker", Callback=function(c) ESPColor=c end })

-- Bypass Tab
Bypass:CreateButton({ Name="Speed Hack", Callback=function()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed=50; Rayfield:Notify({Title="Speed",Content="50",Duration=3})
    end
end})
Bypass:CreateButton({ Name="Jump Hack", Callback=function()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character.Humanoid.JumpPower=100; Rayfield:Notify({Title="Jump",Content="100",Duration=3})
    end
end})

print("ZnfPro GUI loaded and aimbot stabilized!")
