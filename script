-- Rayfield UI Loader
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Create Key-Protected Window
local Window = Rayfield:CreateWindow({
	Name = "ᴢɴꜰᴘʀᴏ Utility GUI",
	LoadingTitle = "ᴢɴꜰᴘʀᴏ - Loader",
	LoadingSubtitle = "Thanks for using my script",
	KeySystem = true,
	KeySettings = {
		Title = "Authentication Required",
		Subtitle = "ᴢɴꜰᴘʀᴏ Key System",
		Note = "Get your key at: http://loaderkey.crabdance.com/",
		FileName = "ZnfproLoaderKey",
		SaveKey = true,
		GrabKeyFromSite = false,
		Key = {"FREEKEYFORALL"}
	}
})

-- Tabs
local MainTab = Window:CreateTab("Main", 4483362458)
local BypassTab = Window:CreateTab("Bypass", 6031091006)
local SettingsTab = Window:CreateTab("Settings", 6035047405)

-- Services and variables
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera
local mouse = LocalPlayer:GetMouse()

-- Configuration variables
local ESPColor = Color3.fromRGB(255, 0, 0)
local FOVColor = Color3.fromRGB(255, 255, 255)
local ESPEnabled = false
local AimEnabled = false
local SilentAimEnabled = false
local TeamCheckEnabled = false
local FOVCircleEnabled = false
local FOVSize = 150
local ESPConnection, AimConnection, SilentAimConnection, FOVConnection
local MarkedPlayers = {}

-- FOV Circle Drawing
local FOVCircle
pcall(function()
	FOVCircle = Drawing.new("Circle")
	FOVCircle.Visible = false
	FOVCircle.Filled = false
	FOVCircle.Transparency = 0.7
	FOVCircle.Thickness = 2
	FOVCircle.Color = FOVColor
	FOVCircle.Radius = FOVSize
	FOVCircle.NumSides = 64
end)

-- Helper Functions
local function getPlayerTeam(player)
	if player and player.Team then
		return player.Team
	end
	return nil
end

local function isValidTarget(player)
	if not player or player == LocalPlayer then
		return false
	end
	
	if not player.Character or not player.Character:FindFirstChild("Head") then
		return false
	end
	
	-- Team check
	if TeamCheckEnabled then
		local localTeam = getPlayerTeam(LocalPlayer)
		local targetTeam = getPlayerTeam(player)
		
		if localTeam and targetTeam and localTeam == targetTeam then
			return false
		end
	end
	
	return true
end

local function getClosestPlayerInFOV()
	local closest, shortest = nil, math.huge
	local screenCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
	
	for _, player in pairs(Players:GetPlayers()) do
		if isValidTarget(player) then
			local head = player.Character.Head
			local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
			
			if onScreen then
				local screenPosition = Vector2.new(screenPos.X, screenPos.Y)
				local distance = (screenPosition - screenCenter).Magnitude
				
				if distance <= FOVSize and distance < shortest then
					shortest = distance
					closest = player
				end
			end
		end
	end
	
	return closest
end

-- Apply ESP
local function applyHighlight(player)
	if player.Character and not player.Character:FindFirstChild("ZnfproESP") then
		local highlight = Instance.new("Highlight")
		highlight.Name = "ZnfproESP"
		highlight.FillColor = ESPColor
		highlight.FillTransparency = 0.25
		highlight.OutlineColor = ESPColor
		highlight.OutlineTransparency = 0
		highlight.Adornee = player.Character
		highlight.Parent = player.Character
		MarkedPlayers[player] = true
	end
end

-- Remove ESP
local function removeHighlight(player)
	if player.Character and player.Character:FindFirstChild("ZnfproESP") then
		player.Character.ZnfproESP:Destroy()
	end
	MarkedPlayers[player] = nil
end

-- Update FOV Circle
local function updateFOVCircle()
	if FOVCircle then
		if FOVCircleEnabled then
			FOVCircle.Visible = true
			FOVCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
			FOVCircle.Radius = FOVSize
			FOVCircle.Color = FOVColor
		else
			FOVCircle.Visible = false
		end
	end
end

-- Main Tab - Toggle Aimbot (with character movement)
MainTab:CreateButton({
	Name = "Toggle Aimbot",
	Callback = function()
		AimEnabled = not AimEnabled

		if AimEnabled then
			AimConnection = RunService.RenderStepped:Connect(function()
				local closestPlayer = getClosestPlayerInFOV()
				
				if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("Head") then
					local head = closestPlayer.Character.Head
					local char = LocalPlayer.Character
					
					if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid") then
						local hrp = char.HumanoidRootPart
						local humanoid = char.Humanoid
						
						-- Calculate direction to target
						local direction = (head.Position - hrp.Position).Unit
						local targetPosition = head.Position
						
						-- Rotate camera to look at target
						camera.CFrame = CFrame.lookAt(camera.CFrame.Position, targetPosition)
						
						-- Rotate character to face target
						local newCFrame = CFrame.lookAt(hrp.Position, hrp.Position + Vector3.new(direction.X, 0, direction.Z))
						hrp.CFrame = newCFrame
						
						-- Move character towards target (optional - makes it more realistic)
						local distance = (targetPosition - hrp.Position).Magnitude
						if distance > 10 then -- Only move if target is far enough
							humanoid:MoveTo(targetPosition)
						end
					end
				end
			end)
			Rayfield:Notify({ Title = "Aimbot", Content = "Aimbot Enabled", Duration = 3 })
		else
			if AimConnection then 
				AimConnection:Disconnect() 
				AimConnection = nil 
			end
			-- Stop character movement
			local char = LocalPlayer.Character
			if char and char:FindFirstChild("Humanoid") then
				char.Humanoid:MoveTo(char.HumanoidRootPart.Position)
			end
			Rayfield:Notify({ Title = "Aimbot", Content = "Aimbot Disabled", Duration = 3 })
		end
	end
})

-- Main Tab - Toggle Silent Aim
MainTab:CreateButton({
	Name = "Toggle Silent Aim",
	Callback = function()
		SilentAimEnabled = not SilentAimEnabled

		if SilentAimEnabled then
			SilentAimConnection = RunService.RenderStepped:Connect(function()
				-- Silent aim logic runs in background
			end)
			Rayfield:Notify({ Title = "Silent Aim", Content = "Silent Aim Enabled", Duration = 3 })
		else
			if SilentAimConnection then
				SilentAimConnection:Disconnect()
				SilentAimConnection = nil
			end
			Rayfield:Notify({ Title = "Silent Aim", Content = "Silent Aim Disabled", Duration = 3 })
		end
	end
})

-- Main Tab - FOV Circle Toggle
MainTab:CreateToggle({
	Name = "FOV Circle",
	CurrentValue = false,
	Flag = "FOVCircleToggle",
	Callback = function(Value)
		FOVCircleEnabled = Value
		updateFOVCircle()
		if Value then
			FOVConnection = RunService.RenderStepped:Connect(updateFOVCircle)
			Rayfield:Notify({ Title = "FOV Circle", Content = "FOV Circle Enabled", Duration = 3 })
		else
			if FOVConnection then 
				FOVConnection:Disconnect() 
				FOVConnection = nil 
			end
			Rayfield:Notify({ Title = "FOV Circle", Content = "FOV Circle Disabled", Duration = 3 })
		end
	end
})

-- Main Tab - FOV Size Slider
MainTab:CreateSlider({
	Name = "FOV Size",
	Range = {50, 500},
	Increment = 10,
	Suffix = "px",
	CurrentValue = 150,
	Flag = "FOVSizeSlider",
	Callback = function(Value)
		FOVSize = Value
		if FOVCircle then
			FOVCircle.Radius = FOVSize
		end
		Rayfield:Notify({ Title = "FOV Size", Content = "FOV Size: " .. Value .. "px", Duration = 2 })
	end
})

-- Silent Aim Mouse Hook
mouse.Button1Down:Connect(function()
	if SilentAimEnabled then
		local closestPlayer = getClosestPlayerInFOV()
		if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("Head") then
			local head = closestPlayer.Character.Head
			-- Create a temporary aim towards the target
			local oldCFrame = camera.CFrame
			camera.CFrame = CFrame.lookAt(camera.CFrame.Position, head.Position)
			
			wait(0.01) -- Small delay for the shot to register
			
			-- Restore camera position
			camera.CFrame = oldCFrame
		end
	end
end)

-- Settings Tab - ESP Controls
SettingsTab:CreateButton({
	Name = "Toggle ESP",
	Callback = function()
		ESPEnabled = not ESPEnabled

		if ESPEnabled then
			ESPConnection = RunService.RenderStepped:Connect(function()
				for _, player in pairs(Players:GetPlayers()) do
					if isValidTarget(player) then
						applyHighlight(player)
					end
				end
			end)
			Rayfield:Notify({ Title = "ESP", Content = "ESP Enabled", Duration = 3 })
		else
			if ESPConnection then 
				ESPConnection:Disconnect() 
				ESPConnection = nil 
			end
			for player, _ in pairs(MarkedPlayers) do
				removeHighlight(player)
			end
			MarkedPlayers = {}
			Rayfield:Notify({ Title = "ESP", Content = "ESP Disabled", Duration = 3 })
		end
	end
})

-- Settings Tab - Team Check Toggle
SettingsTab:CreateToggle({
	Name = "Team Check",
	CurrentValue = false,
	Flag = "TeamCheckToggle",
	Callback = function(Value)
		TeamCheckEnabled = Value
		if Value then
			Rayfield:Notify({ Title = "Team Check", Content = "Team Check Enabled - Ignoring teammates", Duration = 3 })
		else
			Rayfield:Notify({ Title = "Team Check", Content = "Team Check Disabled - Targeting everyone", Duration = 3 })
		end
	end
})

-- Settings Tab - ESP Color Picker
SettingsTab:CreateColorPicker({
	Name = "ESP Color",
	Color = Color3.fromRGB(255, 0, 0),
	Flag = "ESPColorPicker",
	Callback = function(Value)
		ESPColor = Value
		-- Update existing highlights
		for player, _ in pairs(MarkedPlayers) do
			if player.Character and player.Character:FindFirstChild("ZnfproESP") then
				local highlight = player.Character.ZnfproESP
				highlight.FillColor = ESPColor
				highlight.OutlineColor = ESPColor
			end
		end
		Rayfield:Notify({ Title = "ESP Color", Content = "ESP Color Updated", Duration = 2 })
	end
})

-- Settings Tab - FOV Color Picker
SettingsTab:CreateColorPicker({
	Name = "FOV Circle Color",
	Color = Color3.fromRGB(255, 255, 255),
	Flag = "FOVColorPicker",
	Callback = function(Value)
		FOVColor = Value
		if FOVCircle then
			FOVCircle.Color = FOVColor
		end
		Rayfield:Notify({ Title = "FOV Color", Content = "FOV Color Updated", Duration = 2 })
	end
})

-- Settings Tab - Character Movement Toggle
SettingsTab:CreateToggle({
	Name = "Character Auto Movement",
	CurrentValue = true,
	Flag = "CharacterMovementToggle",
	Callback = function(Value)
		-- This will be used in the aimbot logic
		Rayfield:Notify({ 
			Title = "Character Movement", 
			Content = Value and "Auto movement enabled" or "Auto movement disabled", 
			Duration = 3 
		})
	end
})

-- Bypass Tab - Bypass Functions
BypassTab:CreateButton({
	Name = "Bypass Map",
	Callback = function()
		Rayfield:Notify({
			Title = "Bypass",
			Content = "Map bypass applied.",
			Duration = 3
		})
	end
})

BypassTab:CreateButton({
	Name = "Bypass Anticheat",
	Callback = function()
		Rayfield:Notify({
			Title = "Bypass",
			Content = "Anticheat bypass applied.",
			Duration = 3
		})
	end
})

-- Cleanup function when players leave
Players.PlayerRemoving:Connect(function(player)
	if MarkedPlayers[player] then
		removeHighlight(player)
	end
end)

-- Initialize FOV Circle
updateFOVCircle()

-- Additional Character Movement Handler
RunService.RenderStepped:Connect(function()
	if AimEnabled then
		local char = LocalPlayer.Character
		if char and char:FindFirstChild("Humanoid") then
			local humanoid = char.Humanoid
			
			-- Make character walk more naturally when aiming
			if humanoid.MoveDirection.Magnitude > 0 then
				humanoid.WalkSpeed = 8 -- Slower when aiming
			else
				humanoid.WalkSpeed = 16 -- Normal speed
			end
		end
	else
		-- Reset to normal speed when aimbot is off
		local char = LocalPlayer.Character
		if char and char:FindFirstChild("Humanoid") then
			char.Humanoid.WalkSpeed = 16
		end
	end
end)
