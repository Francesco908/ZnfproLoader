-- ZnfPro Universal Gaming Utility - Final Fix
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not success then
    warn("Failed to load Rayfield UI Library")
    return
end

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "ᴢɴꜰᴘʀᴏ Universal GUI",
    LoadingTitle = "ᴢɴꜰᴘʀᴏ - Loader",
    LoadingSubtitle = "Universal script for all games",
    KeySystem = true,
    KeySettings = {
        Title = "Authentication Required",
        Subtitle = "ᴢɴꜰᴘʀᴏ Key System",
        Note = "Get your key at: loaderkey.crabdance.com",
        FileName = "ZnfproLoaderKey",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"FREEKEYFORALL"},
    },
})

-- Services
local Players          = game:GetService("Players")
local LocalPlayer      = Players.LocalPlayer
local RunService       = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local camera           = workspace.CurrentCamera

-- State
local ESPColor         = Color3.fromRGB(255, 0, 0)
local FOVColor         = Color3.fromRGB(255, 255, 255)
local ESPEnabled       = false
local AimEnabled       = false
local SilentAimEnabled = false
local TeamCheckEnabled = false
local FOVSize          = 150
local AimSmoothness    = 0.1
local ESPConn, AimConn

local MarkedPlayers = {}

-- FOV Circle (Drawing)
local FOVCircle
if Drawing then
    FOVCircle = Drawing.new("Circle")
    FOVCircle.Filled        = false
    FOVCircle.Transparency  = 0.5
    FOVCircle.Thickness     = 2
    FOVCircle.NumSides      = 64
    FOVCircle.ZIndex        = 2
end

-- Helpers
local function getCharacterParts(c)
    if not c then return {} end
    return {
        head     = c:FindFirstChild("Head"),
        humanoid = c:FindFirstChild("Humanoid"),
    }
end

local function isValidTarget(p)
    if p == LocalPlayer or not p.Character then return false end
    local parts = getCharacterParts(p.Character)
    if not parts.head or not parts.humanoid or parts.humanoid.Health <= 0 then
        return false
    end
    if TeamCheckEnabled and p.Team == LocalPlayer.Team then
        return false
    end
    return true
end

local function getClosestPlayerInFOV()
    local closest, minD = nil, FOVSize
    local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
    for _, p in ipairs(Players:GetPlayers()) do
        if isValidTarget(p) then
            local head = getCharacterParts(p.Character).head
            local pos, onScreen = camera:WorldToViewportPoint(head.Position)
            if onScreen and pos.Z > 0 then
                local d = (Vector2.new(pos.X, pos.Y) - center).Magnitude
                if d < minD then
                    minD, closest = d, p
                end
            end
        end
    end
    return closest
end

-- ESP
local function applyESP(p)
    if not p.Character or p.Character:FindFirstChild("ZnfproESP") then return end
    pcall(function()
        local h = Instance.new("Highlight", p.Character)
        h.Name             = "ZnfproESP"
        h.FillColor        = ESPColor
        h.FillTransparency = 0.25
        h.OutlineColor     = ESPColor
        h.OutlineTransparency = 0
        local bg = Instance.new("BillboardGui", p.Character)
        bg.Name        = "ZnfproESPText"
        bg.Adornee     = getCharacterParts(p.Character).head
        bg.Size        = UDim2.new(0,100,0,50)
        bg.StudsOffset = Vector3.new(0,2,0)
        bg.AlwaysOnTop = true
        local tl = Instance.new("TextLabel", bg)
        tl.Size                   = UDim2.new(1,0,1,0)
        tl.BackgroundTransparency = 1
        tl.Text                   = p.Name
        tl.TextColor3             = ESPColor
        tl.TextScaled             = true
        tl.Font                   = Enum.Font.SourceSansBold
        MarkedPlayers[p] = true
    end)
end

local function removeESP(p)
    if not p.Character then return end
    pcall(function()
        local h  = p.Character:FindFirstChild("ZnfproESP")
        local bg = p.Character:FindFirstChild("ZnfproESPText")
        if h  then h:Destroy() end
        if bg then bg:Destroy() end
    end)
    MarkedPlayers[p] = nil
end

-- Smooth head aim
local function smoothHeadAim(pos)
    local c0 = camera.CFrame
    local desired = CFrame.lookAt(c0.Position, pos)
    camera.CFrame = c0:Lerp(desired, AimSmoothness)
end

-- Main render loop
RunService.RenderStepped:Connect(function()
    -- Draw FOV circle
    if FOVCircle then
        FOVCircle.Visible       = true
        FOVCircle.Position      = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
        FOVCircle.Radius        = FOVSize
        FOVCircle.Color         = FOVColor
    end

    -- ESP
    if ESPEnabled then
        for _, p in ipairs(Players:GetPlayers()) do
            if isValidTarget(p) then
                applyESP(p)
            elseif MarkedPlayers[p] then
                removeESP(p)
            end
        end
    end

    -- Aimbot / Silent Aim
    local target = getClosestPlayerInFOV()
    if target and target.Character then
        local headPos = getCharacterParts(target.Character).head.Position
        -- Legit Aimbot
        if AimEnabled then
            smoothHeadAim(headPos)
        end
        -- Silent Aim
        if SilentAimEnabled and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
            local old = camera.CFrame
            camera.CFrame = CFrame.lookAt(old.Position, headPos)
            task.wait()
            camera.CFrame = old
        end
    end
end)

-- GUI
local MainTab     = Window:CreateTab("Main",     4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local BypassTab   = Window:CreateTab("Bypass",   6031091006)

-- MainTab controls
MainTab:CreateToggle({
    Name         = "Aimbot (Legit)",
    CurrentValue = false,
    Callback     = function(v)
        AimEnabled = v
        Rayfield:Notify({Title="Aimbot",Content=v and "Enabled" or "Disabled",Duration=2})
    end,
})

MainTab:CreateToggle({
    Name         = "Silent Aim (Legit)",
    CurrentValue = false,
    Callback     = function(v)
        SilentAimEnabled = v
        Rayfield:Notify({Title="Silent Aim",Content=v and "Enabled" or "Disabled",Duration=2})
    end,
})

MainTab:CreateSlider({
    Name         = "FOV Size",
    Range        = {50,500},
    Increment    = 10,
    Suffix       = "px",
    CurrentValue = FOVSize,
    Callback     = function(v) FOVSize = v end,
})

MainTab:CreateSlider({
    Name         = "Aim Smoothness",
    Range        = {0.01,1},
    Increment    = 0.01,
    CurrentValue = AimSmoothness,
    Callback     = function(v) AimSmoothness = v end,
})

-- SettingsTab controls
SettingsTab:CreateToggle({
    Name         = "ESP",
    CurrentValue = false,
    Callback     = function(v)
        ESPEnabled = v
        if not v then
            for p in pairs(MarkedPlayers) do removeESP(p) end
        end
        Rayfield:Notify({Title="ESP",Content=v and "Enabled" or "Disabled",Duration=2})
    end,
})

SettingsTab:CreateColorPicker({
    Name    = "ESP Color",
    Color   = ESPColor,
    Callback= function(v) ESPColor = v end,
})

SettingsTab:CreateToggle({
    Name         = "Team Check",
    CurrentValue = false,
    Callback     = function(v)
        TeamCheckEnabled = v
        Rayfield:Notify({Title="Team Check",Content=v and "On" or "Off",Duration=2})
    end,
})

-- BypassTab left as-is
BypassTab:CreateButton({
    Name     = "Universal Bypass",
    Callback = function()
        pcall(function()
            for _, f in pairs(getgc(true)) do
                if type(f)=="table" and rawget(f,"Detected") then
                    rawset(f,"Detected",function() return false end)
                end
            end
        end)
        Rayfield:Notify({Title="Bypass",Content="Applied",Duration=2})
    end,
})

print("ZnfPro Universal GUI — final version loaded!")
