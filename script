```lua
-- ZnfPro Universal Gaming Utility – No Recoil & Enhanced Aimbot
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not success then
    warn("Failed to load Rayfield UI Library")
    return
end

-- Window
local Window = Rayfield:CreateWindow({
    Name = "ᴢɴꜰᴘʀᴏ Universal GUI",
    LoadingTitle = "ᴢɴꜰᴘʀᴏ - Loader",
    LoadingSubtitle = "Universal script for all games",
    KeySystem = true,
    KeySettings = {
        Title = "Authentication Required",
        Subtitle = "ᴢɴꜰᴘʀᴏ Key System",
        Note = "Get your key at: loaderkey.crabdance.com",
        FileName = "ZnfproLoaderKey",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"FREEKEYFORALL"}
    }
})

-- Services & Vars
local Players          = game:GetService("Players")
local LocalPlayer      = Players.LocalPlayer
local RunService       = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local camera           = workspace.CurrentCamera

local ESPColor         = Color3.fromRGB(255, 0, 0)
local FOVColor         = Color3.fromRGB(255, 255, 255)
local ESPEnabled       = false
local AimEnabled       = false
local SilentAimEnabled = false
local TeamCheckEnabled = false
local FOVCircleEnabled = false
local NoRecoilEnabled  = false

local FOVSize       = 150
local AimSmoothness = 0.1

local ESPConn, AimConn, FOVConn
local MarkedPlayers = {}

-- FOV Circle (Drawing API)
local FOVCircle
if Drawing then
    FOVCircle = Drawing.new("Circle")
    FOVCircle.Visible      = false
    FOVCircle.Filled       = false
    FOVCircle.Transparency = 0.5
    FOVCircle.Thickness    = 2
    FOVCircle.Color        = FOVColor
    FOVCircle.Radius       = FOVSize
    FOVCircle.NumSides     = 64
    FOVCircle.ZIndex       = 2
end

-- Tabs
local MainTab     = Window:CreateTab("Main",     4483362458)
local SettingsTab = Window:CreateTab("Settings", 123456789)  -- new icon ID
local BypassTab   = Window:CreateTab("Bypass",   6031091006)

-- Helper: character parts
local function getParts(char)
    return {
        head = char:FindFirstChild("Head"),
        humanoid = char:FindFirstChild("Humanoid"),
        hrp = char:FindFirstChild("HumanoidRootPart")
    }
end

-- Update FOV circle
local function updateFOVCircle()
    if FOVCircle and FOVCircleEnabled then
        FOVCircle.Visible  = true
        FOVCircle.Position = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
        FOVCircle.Radius   = FOVSize
        FOVCircle.Color    = FOVColor
    elseif FOVCircle then
        FOVCircle.Visible = false
    end
end

-- Team check
local function sameTeam(pl)
    return pl.Team and LocalPlayer.Team and pl.Team == LocalPlayer.Team
end

-- Validate target
local function isValid(pl)
    if pl == LocalPlayer then return false end
    if not pl.Character then return false end
    local p = getParts(pl.Character)
    if not p.head or not p.humanoid or p.humanoid.Health <= 0 then return false end
    if TeamCheckEnabled and sameTeam(pl) then return false end
    return true
end

-- Closest in FOV
local function getClosest()
    local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
    local best, dist = nil, math.huge
    for _, pl in pairs(Players:GetPlayers()) do
        if isValid(pl) then
            local pos, on = camera:WorldToViewportPoint(pl.Character.Head.Position)
            if on and pos.Z > 0 then
                local d = (Vector2.new(pos.X,pos.Y) - center).Magnitude
                if d <= FOVSize and d < dist then
                    best, dist = pl, d
                end
            end
        end
    end
    return best
end

-- Predictive lead (basic)
local function predict(pos)
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return pos end
    local d = (hrp.Position - pos).Magnitude
    local vel = hrp.Velocity
    local t = d / 1000
    return pos + vel * t
end

-- Smooth aim
local function smoothAim(target)
    local cf   = camera.CFrame
    local goal = CFrame.lookAt(cf.Position, target)
    camera.CFrame = cf:Lerp(goal, AimSmoothness)
end

-- ESP apply/remove
local function applyESP(pl)
    if pl.Character and not pl.Character:FindFirstChild("ZnfproESP") then
        local h = Instance.new("Highlight", pl.Character)
        h.Name             = "ZnfproESP"
        h.FillColor        = ESPColor
        h.FillTransparency = 0.25
        h.OutlineColor     = ESPColor
        h.OutlineTransparency = 0
        MarkedPlayers[pl] = true
    end
end
local function removeESP(pl)
    if pl.Character then
        local h = pl.Character:FindFirstChild("ZnfproESP")
        if h then h:Destroy() end
    end
    MarkedPlayers[pl] = nil
end
local function clearESP()
    for pl in pairs(MarkedPlayers) do removeESP(pl) end
end

-- No Recoil: revert camera after shot
UserInputService.InputBegan:Connect(function(inp,gp)
    if gp then return end
    if NoRecoilEnabled and inp.UserInputType == Enum.UserInputType.MouseButton1 then
        local pre = camera.CFrame
        task.delay(0.05, function()
            camera.CFrame = pre
        end)
    end
end)

-- Silent Aim hook
UserInputService.InputBegan:Connect(function(inp,gp)
    if gp then return end
    if inp.UserInputType == Enum.UserInputType.MouseButton1 and SilentAimEnabled then
        local tgt = getClosest()
        if tgt then
            local old = camera.CFrame
            local pd  = predict(tgt.Character.Head.Position)
            camera.CFrame = CFrame.lookAt(old.Position, pd)
            task.wait(0.01)
            camera.CFrame = old
        end
    end
end)

-- Main Tab

-- Aimbot
MainTab:CreateButton({
    Name = "Toggle Aimbot",
    Callback = function()
        AimEnabled = not AimEnabled
        if AimEnabled then
            AimConn = RunService.RenderStepped:Connect(function()
                local tgt = getClosest()
                if tgt then
                    smoothAim(predict(tgt.Character.Head.Position))
                end
            end)
            Rayfield:Notify({Title="Aimbot",Content="Enabled",Duration=3})
        else
            if AimConn then AimConn:Disconnect() AimConn=nil end
            Rayfield:Notify({Title="Aimbot",Content="Disabled",Duration=3})
        end
    end
})

-- Silent Aim
MainTab:CreateButton({
    Name = "Toggle Silent Aim",
    Callback = function()
        SilentAimEnabled = not SilentAimEnabled
        Rayfield:Notify({Title="Silent Aim",Content=SilentAimEnabled and "Enabled" or "Disabled",Duration=3})
    end
})

-- FOV Circle Toggle
MainTab:CreateToggle({
    Name = "FOV Circle",
    CurrentValue = false,
    Flag = "FOVCircleToggle",
    Callback = function(v)
        FOVCircleEnabled = v
        if v then
            FOVConn = RunService.RenderStepped:Connect(updateFOVCircle)
        else
            if FOVConn then FOVConn:Disconnect() FOVConn=nil end
            if FOVCircle then FOVCircle.Visible=false end
        end
        Rayfield:Notify({Title="FOV Circle",Content=v and "Enabled" or "Disabled",Duration=3})
    end
})

-- FOV Size Slider
MainTab:CreateSlider({
    Name = "FOV Size",
    Range = {50,500},
    Increment = 10,
    Suffix = "px",
    CurrentValue = 150,
    Flag = "FOVSizeSlider",
    Callback = function(v)
        FOVSize = v
        if FOVCircle then FOVCircle.Radius=v end
    end
})

-- Aim Smoothness Slider
MainTab:CreateSlider({
    Name = "Aim Smoothness",
    Range = {0.01,1},
    Increment = 0.01,
    Suffix = "",
    CurrentValue = 0.1,
    Flag = "AimSmoothnessSlider",
    Callback = function(v)
        AimSmoothness = v
        Rayfield:Notify({Title="Smoothness",Content=string.format("%.2f",v),Duration=2})
    end
})

-- No Recoil Toggle
MainTab:CreateToggle({
    Name = "No Recoil",
    CurrentValue = false,
    Flag = "NoRecoilToggle",
    Callback = function(v)
        NoRecoilEnabled = v
        Rayfield:Notify({Title="No Recoil",Content=v and "Enabled" or "Disabled",Duration=3})
    end
})

-- Settings Tab

-- ESP Toggle
SettingsTab:CreateButton({
    Name = "Toggle ESP",
    Callback = function()
        ESPEnabled = not ESPEnabled
        if ESPEnabled then
            ESPConn = RunService.RenderStepped:Connect(function()
                for _,pl in pairs(Players:GetPlayers()) do
                    if isValid(pl) then applyESP(pl) elseif MarkedPlayers[pl] then removeESP(pl) end
                end
            end)
            Rayfield:Notify({Title="ESP",Content="Enabled",Duration=3})
        else
            if ESPConn then ESPConn:Disconnect() ESPConn=nil end
            clearESP()
            Rayfield:Notify({Title="ESP",Content="Disabled",Duration=3})
        end
    end
})

-- Team Check Toggle
SettingsTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = false,
    Flag = "TeamCheckToggle",
    Callback = function(v)
        TeamCheckEnabled = v
        clearESP()
        Rayfield:Notify({Title="Team Check",Content=v and "On" or "Off",Duration=2})
    end
})

-- ESP Color Picker
SettingsTab:CreateColorPicker({
    Name = "ESP Color",
    Color = ESPColor,
    Flag = "ESPColorPicker",
    Callback = function(v)
        ESPColor = v
        for pl in pairs(MarkedPlayers) do
            local h = pl.Character and pl.Character:FindFirstChild("ZnfproESP")
            if h then h.FillColor=v; h.OutlineColor=v end
        end
    end
})

-- FOV Color Picker
SettingsTab:CreateColorPicker({
    Name = "FOV Color",
    Color = FOVColor,
    Flag = "FOVColorPicker",
    Callback = function(v)
        FOVColor = v
        if FOVCircle then FOVCircle.Color=v end
    end
})

-- Bypass Tab
BypassTab:CreateButton({
    Name = "Universal Bypass",
    Callback = function()
        pcall(function()
            for _,gc in pairs(getgc(true)) do
                if type(gc)=="table" and rawget(gc,"Detected") then
                    rawset(gc,"Detected",function() return false end)
                end
            end
        end)
        Rayfield:Notify({Title="Bypass",Content="Applied",Duration=3})
    end
})
BypassTab:CreateButton({
    Name = "Speed Hack",
    Callback = function()
        local hr = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if hr then hr.WalkSpeed = 50 end
        Rayfield:Notify({Title="Speed",Content="WalkSpeed=50",Duration=3})
    end
})
BypassTab:CreateButton({
    Name = "Jump Power",
    Callback = function()
        local hr = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid")
        if hr then hr.JumpPower = 100 end
        Rayfield:Notify({Title="Jump",Content="JumpPower=100",Duration=3})
    end
})

-- Cleanup
Players.PlayerRemoving:Connect(removeESP)

-- Init
task.wait(1)
updateFOVCircle()
print("ZnfPro Universal GUI loaded!")
```
