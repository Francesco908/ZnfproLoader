-- ZnfPro Universal Gaming Utility - Aimbot Fix & Stabilization
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not success then
    warn("Failed to load Rayfield UI Library")
    return
end

-- Window Initialization
local Window = Rayfield:CreateWindow({
    Name = "ᴢɴꜰᴘʀᴏ Universal GUI",
    LoadingTitle = "ᴢɴꜰᴘʀᴏ - Loader",
    LoadingSubtitle = "Universal script for all games",
    KeySystem = true,
    KeySettings = { Title = "Authentication Required", Subtitle = "ᴢɴꜰᴘʀᴏ Key System", Note = "Get your key at: loaderkey.crabdance.com", FileName = "ZnfproLoaderKey", SaveKey = true, GrabKeyFromSite = false, Key = {"FREEKEYFORALL"} }
})

-- Services & Vars
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera

local ESPColor = Color3.fromRGB(255,0,0)
local AimEnabled, NoRecoilEnabled, ESPEnabled, TeamCheckEnabled = false, false, false, false
local FOVSize, AimSmoothness, PredictionStrength = 150, 0.15, 0.1
local AimConn, ESPConn
local Marked = {}

-- Helpers
local function getParts(char)
    local head = char:FindFirstChild("Head")
    local root = char:FindFirstChild("HumanoidRootPart")
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    return head, root, humanoid
end

local function isValid(player)
    if player == LocalPlayer or not player.Character then return false end
    local head, root, h = getParts(player.Character)
    if not head or not root or not h or h.Health <= 0 then return false end
    if TeamCheckEnabled and player.Team and LocalPlayer.Team then
        if player.Team == LocalPlayer.Team then return false end
    end
    return true
end

local function getDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

local function closestInFOV()
    local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
    local best, bestDist = nil, math.huge
    
    for _, p in pairs(Players:GetPlayers()) do
        if isValid(p) then
            local head = p.Character:FindFirstChild("Head")
            if head then
                local pos, onScreen = camera:WorldToViewportPoint(head.Position)
                if onScreen and pos.Z > 0 then
                    local screenPos = Vector2.new(pos.X, pos.Y)
                    local distanceFromCenter = (screenPos - center).Magnitude
                    
                    -- Check if within FOV circle and prioritize head shots
                    if distanceFromCenter <= FOVSize then
                        local worldDistance = getDistance(camera.CFrame.Position, head.Position)
                        -- Heavily prioritize distance to crosshair for precise headshots
                        local priority = distanceFromCenter * 2 + (worldDistance * 0.005)
                        
                        if priority < bestDist then
                            best, bestDist = p, priority
                        end
                    end
                end
            end
        end
    end
    return best
end

-- Aimbot Logic: Perfected headshot targeting
local function doAim()
    pcall(function()
        local target = closestInFOV()
        if not target or not target.Character then return end
        
        local head, root = getParts(target.Character)
        if not head or not root then return end
        
        -- Enhanced head position calculation with offset
        local headPosition = head.Position
        local headSize = head.Size
        local targetCenter = headPosition + Vector3.new(0, headSize.Y * 0.1, 0) -- Slightly above center
        
        -- Calculate prediction with velocity compensation
        local velocity = root.Velocity
        local distance = getDistance(camera.CFrame.Position, headPosition)
        local timeToTarget = distance / 1000 -- Adjust based on bullet speed
        
        -- Apply prediction only for fast-moving targets
        local predictedPosition = targetCenter
        if velocity.Magnitude > 8 then
            local prediction = velocity * PredictionStrength * timeToTarget
            predictedPosition = targetCenter + prediction
        end
        
        -- Precise camera targeting with enhanced smoothing
        local currentCFrame = camera.CFrame
        local lookDirection = (predictedPosition - currentCFrame.Position).Unit
        local targetCFrame = CFrame.lookAt(currentCFrame.Position, currentCFrame.Position + lookDirection)
        
        -- Apply smoothing with head-lock precision
        camera.CFrame = currentCFrame:Lerp(targetCFrame, AimSmoothness)
    end)
end

-- GUI Tabs
local Main = Window:CreateTab("Main", 4483362458)
local Settings = Window:CreateTab("Settings", 4483362458)
local Bypass = Window:CreateTab("Bypass", 6031091006)

-- Main: Aimbot Toggle
Main:CreateToggle({ Name="Aimbot", CurrentValue=false, Flag="AimToggle", Callback=function(val)
    AimEnabled = val
    if AimConn then AimConn:Disconnect() end
    if AimEnabled then
        AimConn = RunService.RenderStepped:Connect(doAim)
        Rayfield:Notify({Title="Aimbot", Content="Enabled", Duration=3})
    else
        Rayfield:Notify({Title="Aimbot", Content="Disabled", Duration=3})
    end
end})

-- Main: FOV & Smoothness
Main:CreateSlider({ Name="FOV Size", Range={50,500}, Increment=10, Suffix="px", CurrentValue=FOVSize, Flag="FOVSlider", Callback=function(v) FOVSize=v end })
Main:CreateSlider({ Name="Smoothness", Range={0.01,0.5}, Increment=0.01, CurrentValue=AimSmoothness, Flag="SmoothSlider", Callback=function(v) AimSmoothness=v end })
Main:CreateSlider({ Name="Prediction", Range={0,0.5}, Increment=0.01, CurrentValue=PredictionStrength, Flag="PredictionSlider", Callback=function(v) PredictionStrength=v end })

-- Main: No Recoil (Improved)
Main:CreateToggle({ Name="No Recoil", CurrentValue=false, Flag="RecoilToggle", Callback=function(val)
    NoRecoilEnabled = val
    if NoRecoilEnabled then
        pcall(function()
            -- More comprehensive recoil hook
            for _,fn in pairs(getgc(true)) do
                if type(fn)=="function" then
                    local info = debug.getinfo(fn)
                    if info and info.name then
                        local name = info.name:lower()
                        if name:find("recoil") or name:find("spread") or name:find("sway") then
                            hookfunction(fn, function() return end)
                        end
                    end
                end
            end
        end)
        Rayfield:Notify({Title="NoRecoil", Content="Enabled", Duration=3})
    else
        Rayfield:Notify({Title="NoRecoil", Content="Disabled", Duration=3})
    end
end})

-- Settings: ESP & TeamCheck (Fixed color bugs)
Settings:CreateToggle({ Name="ESP", CurrentValue=false, Flag="ESPToggle", Callback=function(v)
    ESPEnabled=v
    if ESPConn then ESPConn:Disconnect() end
    
    -- Clear existing ESP
    for p,h in pairs(Marked) do 
        if h and h.Parent then h:Destroy() end
        Marked[p] = nil 
    end
    
    if ESPEnabled then
        ESPConn = RunService.Heartbeat:Connect(function()
            for _,p in pairs(Players:GetPlayers()) do
                if isValid(p) then
                    if not Marked[p] or not Marked[p].Parent then
                        -- Create new highlight
                        local h = Instance.new("Highlight")
                        h.Adornee = p.Character
                        h.FillColor = ESPColor
                        h.OutlineColor = Color3.fromRGB(255,255,255)
                        h.FillTransparency = 0.4
                        h.OutlineTransparency = 0
                        h.Parent = p.Character
                        Marked[p] = h
                    else
                        -- Update existing highlight color
                        if Marked[p] then
                            Marked[p].FillColor = ESPColor
                        end
                    end
                elseif Marked[p] then
                    -- Remove invalid highlights
                    if Marked[p].Parent then Marked[p]:Destroy() end
                    Marked[p] = nil
                end
            end
        end)
    end
end})

Settings:CreateToggle({ Name="Team Check", CurrentValue=false, Flag="TeamToggle", Callback=function(v) TeamCheckEnabled=v end })
Settings:CreateColorPicker({ Name="ESP Color", Color=ESPColor, Flag="ESPColorPicker", Callback=function(c) ESPColor=c end })

-- Bypass Tab
Bypass:CreateButton({ Name="Speed Hack", Callback=function()
    pcall(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = 50
            Rayfield:Notify({Title="Speed", Content="Set to 50", Duration=3})
        end
    end)
end})

Bypass:CreateButton({ Name="Jump Hack", Callback=function()
    pcall(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character.Humanoid.JumpPower = 100
            Rayfield:Notify({Title="Jump", Content="Set to 100", Duration=3})
        end
    end)
end})

-- Cleanup on player leaving
Players.PlayerRemoving:Connect(function(player)
    if Marked[player] then
        Marked[player]:Destroy()
        Marked[player] = nil
    end
end)

print("ZnfPro GUI loaded with improved aimbot!")
