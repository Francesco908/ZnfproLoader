-- ZnfPro Universal Gaming Utility - Complete Fix
-- Added: Persistent lock onto target while firing; fallback to nearest when moving out

local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not success then warn("Failed to load Rayfield UI Library"); return end

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "ᴢɴꜰᴘʀᴏ Universal GUI",
    LoadingTitle = "ᴢɴꜰᴘʀᴏ - Loader",
    LoadingSubtitle = "Universal script for all games",
    KeySystem = true,
    KeySettings = {
        Title = "Authentication Required",
        Subtitle = "ᴢɴꜰᴘʀᴏ Key System",
        Note = "Get your key at: loaderkey.crabdance.com",
        FileName = "ZnfproLoaderKey",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"FREEKEYFORALL"}
    }
})

-- Tabs
local MainTab     = Window:CreateTab("Main",     4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local BypassTab   = Window:CreateTab("Bypass",   6031091006)

-- Services
local Players            = game:GetService("Players")
local LocalPlayer        = Players.LocalPlayer
local RunService         = game:GetService("RunService")
local UserInputService   = game:GetService("UserInputService")
local camera             = workspace.CurrentCamera

-- Variables
local ESPColor, FOVColor = Color3.fromRGB(255,0,0), Color3.fromRGB(255,255,255)
local ESPEnabled, AimEnabled, SilentAimEnabled, TeamCheckEnabled, FOVCircleEnabled, NoRecoilEnabled = false, false, false, false, false, false
local FOVSize, AimSmoothness = 150, 1
local ESPConn, AimConn
local MarkedPlayers = {}
local currentTarget = nil

-- FOV Circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Filled = false
FOVCircle.Transparency = 0.6
FOVCircle.Thickness = 2
FOVCircle.NumSides = 64
FOVCircle.ZIndex = 2

-- Helpers
local function getCharacterParts(c)
    return c and {head = c:FindFirstChild("Head"), humanoid = c:FindFirstChild("Humanoid")} or {}
end

local function isValidTarget(p)
    if p == LocalPlayer or not p.Character then return false end
    local parts = getCharacterParts(p.Character)
    if not parts.head or not parts.humanoid or parts.humanoid.Health <= 0 then return false end
    if TeamCheckEnabled and p.Team == LocalPlayer.Team then return false end
    return true
end

-- Finds closest valid in FOV
local function findClosest()
    local mpos = UserInputService:GetMouseLocation()
    local closest, minDist = nil, FOVSize
    for _, p in ipairs(Players:GetPlayers()) do
        if isValidTarget(p) then
            local head = p.Character.Head
            local sp, onScreen = camera:WorldToViewportPoint(head.Position)
            if onScreen and sp.Z > 0 then
                local d = (Vector2.new(sp.X, sp.Y) - Vector2.new(mpos.X, mpos.Y)).Magnitude
                if d < minDist then minDist = d; closest = p end
            end
        end
    end
    return closest
end

-- ESP functions
local function applyESP(p)
    if p.Character and not p.Character:FindFirstChild("ZnfproESP") then
        local h = Instance.new("Highlight", p.Character)
        h.Name = "ZnfproESP"; h.FillColor = ESPColor; h.FillTransparency = 0.25; h.OutlineColor = ESPColor; h.OutlineTransparency = 0
        local b = Instance.new("BillboardGui", p.Character)
        b.Name = "ZnfproESPText"; b.Adornee = p.Character.Head; b.Size = UDim2.new(0,100,0,50); b.StudsOffset = Vector3.new(0,2,0)
        local t = Instance.new("TextLabel", b)
        t.Size = UDim2.new(1,0,1,0); t.BackgroundTransparency = 1; t.Text = p.Name; t.TextColor3 = ESPColor; t.TextScaled = true; t.Font = Enum.Font.SourceSansBold
        MarkedPlayers[p] = true
    end
end

local function removeESP(p)
    if p.Character then
        local h = p.Character:FindFirstChild("ZnfproESP"); if h then h:Destroy() end
        local b = p.Character:FindFirstChild("ZnfproESPText"); if b then b:Destroy() end
    end
    MarkedPlayers[p] = nil
end

local function removeAllESP()
    for p in pairs(MarkedPlayers) do removeESP(p) end
end

-- Aim functions
local function smoothAim(pos)
    camera.CFrame = CFrame.lookAt(camera.CFrame.Position, pos)
end

-- Main loop
RunService.RenderStepped:Connect(function()
    -- Draw FOV
    if FOVCircleEnabled then
        local m = UserInputService:GetMouseLocation()
        FOVCircle.Position = Vector2.new(m.X, m.Y)
        FOVCircle.Radius = FOVSize
        FOVCircle.Color = FOVColor
        FOVCircle.Visible = true
    else
        FOVCircle.Visible = false
    end
    -- Aimbot logic with persistent target
    if AimEnabled then
        if currentTarget and isValidTarget(currentTarget) then
            local head = currentTarget.Character.Head
            local sp, onScreen = camera:WorldToViewportPoint(head.Position)
            local m = UserInputService:GetMouseLocation()
            local dist = (Vector2.new(sp.X,sp.Y) - Vector2.new(m.X,m.Y)).Magnitude
            if onScreen and sp.Z>0 and dist <= FOVSize then
                smoothAim(head.Position)
            else
                currentTarget = findClosest()
                if currentTarget then smoothAim(currentTarget.Character.Head.Position) end
            end
        else
            currentTarget = findClosest()
            if currentTarget then smoothAim(currentTarget.Character.Head.Position) end
        end
    end
end)

-- Silent Aim hook
local function doSilentAim()
    if SilentAimEnabled then
        currentTarget = currentTarget or findClosest()
        if currentTarget then
            local old = camera.CFrame
            camera.CFrame = CFrame.lookAt(old.Position, currentTarget.Character.Head.Position)
            task.wait()
            camera.CFrame = old
        end
    end
end
UserInputService.InputBegan:Connect(function(i, g)
    if not g and i.UserInputType == Enum.UserInputType.MouseButton1 then spawn(doSilentAim) end
end)

-- GUI controls: Main Tab
MainTab:CreateToggle({ Name = "Enable Aimbot", CurrentValue = false, Callback = function(v)
    AimEnabled = v; if not v then currentTarget = nil end
    Rayfield:Notify({ Title = "Aimbot", Content = v and "Enabled" or "Disabled", Duration = 3 })
end })
MainTab:CreateToggle({ Name = "Silent Aim", CurrentValue = false, Callback = function(v)
    SilentAimEnabled = v; Rayfield:Notify({ Title = "Silent Aim", Content = v and "Enabled" or "Disabled", Duration = 3 })
end })
MainTab:CreateToggle({ Name = "FOV Circle", CurrentValue = false, Flag = "FOVToggle", Callback = function(v)
    FOVCircleEnabled = v; Rayfield:Notify({ Title = "FOV Circle", Content = v and "On" or "Off", Duration = 2 })
end })
MainTab:CreateSlider({ Name = "FOV Size", Range = {50, 500}, Increment = 10, Suffix = "px", CurrentValue = FOVSize, Flag = "FOVSize", Callback = function(v)
    FOVSize = v
end })
MainTab:CreateSlider({ Name = "Aim Smoothness", Range = {0.01, 1}, Increment = 0.01, CurrentValue = AimSmoothness, Flag = "AimSmooth", Callback = function(v)
    AimSmoothness = v
end })
MainTab:CreateToggle({ Name = "No Recoil", CurrentValue = false, Flag = "NoRecoil", Callback = function(v)
    NoRecoilEnabled = v
end })

-- GUI controls: Settings Tab
SettingsTab:CreateToggle({ Name = "ESP", CurrentValue = false, Flag = "ESP", Callback = function(v)
    ESPEnabled = v
    if v then
        ESPConn = RunService.Heartbeat:Connect(function()
            for _, p in ipairs(Players:GetPlayers()) do
                if isValidTarget(p) then applyESP(p) else removeESP(p) end
            end
        end)
    else
        if ESPConn then ESPConn:Disconnect() end
        removeAllESP()
    end
end })
SettingsTab:CreateToggle({ Name = "Team Check", CurrentValue = false, Flag = "TeamCheck", Callback = function(v)
    TeamCheckEnabled = v
end })
SettingsTab:CreateColorPicker({ Name = "ESP Color", Color = ESPColor, Flag = "ESPColor", Callback = function(v) ESPColor = v end })
SettingsTab:CreateColorPicker({ Name = "FOV Color", Color = FOVColor, Flag = "FOVColor", Callback = function(v) FOVColor = v end })

-- GUI controls: Bypass Tab
BypassTab:CreateButton({ Name = "Universal Bypass", Callback = function()
    pcall(function()
        for _, f in pairs(getgc(true)) do
            if type(f) == "table" and rawget(f, "Detected") then rawset(f, "Detected", function() return false end) end
        end
    end)
    Rayfield:Notify({ Title = "Bypass", Content = "Applied", Duration = 3 })
end })
BypassTab:CreateButton({ Name = "Speed Hack", Callback = function()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then LocalPlayer.Character.Humanoid.WalkSpeed = 50 end
end })
BypassTab:CreateButton({ Name = "Jump Power", Callback = function()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then LocalPlayer.Character.Humanoid.JumpPower = 100 end
end })
BypassTab:CreateSlider({ Name = "Walk Speed", Range = {16,100}, Increment = 1, CurrentValue = 16, Suffix = "", Flag = "WalkSpeed", Callback = function(v)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then LocalPlayer.Character.Humanoid.WalkSpeed = v end
end })
BypassTab:CreateSlider({ Name = "Jump Power", Range = {50,200}, Increment = 1, CurrentValue = 50, Suffix = "", Flag = "JumpPower", Callback = function(v)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then LocalPlayer.Character.Humanoid.JumpPower = v end
end })

-- Cleanup
Players.PlayerRemoving:Connect(removeESP)
Players.PlayerAdded:Connect(function(p) p.CharacterRemoving:Connect(function() MarkedPlayers[p] = nil end) end)
LocalPlayer.CharacterAdded:Connect(function() task.wait(1); camera = workspace.CurrentCamera end)

-- Init
task.wait(1); print("ZnfPro Universal GUI loaded!")
